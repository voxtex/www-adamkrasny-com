{"pageProps":{"post":{"title":"$event, where does it come from?","date":"2013-09-29","slug":"event-where-does-it-come-from","content":"<h1>$event, where does it come from?</h1>\n<p>ngClick, ngMousedown, ngMouseup, and every directive event handler in Angular provide the $event parameter in callbacks. I will show you how to do this with your own directives.</p>\n<p>Angular provides an extremely useful service known as $parse. Take a look at the documentation here:</p>\n<p><a href=\"http://docs.angularjs.org/api/ng.%24parse\">ngParse</a></p>\n<p>So it looks like we can take any Angular expression, convert it to a function, and invoke it in the context of a specific scope and using locals we define. Perfect. Let’s see how we can utilize this when creating a directive for drag and drop.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"drag\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"$parse\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$parse</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">scope<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">,</span> attrs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> cb <span class=\"token operator\">=</span> <span class=\"token function\">$parse</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">.</span><span class=\"token property-access\">drag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      elem<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dragstart\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        scope<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">$apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> $event<span class=\"token punctuation\">:</span> e <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Couple of things to note. I protected against minification by using the array syntax to import the $parse service into my directive. This code is integrating with jQuery (notice elem.on).</p>\n<p>Otherwise this code is really straightforward. We use $parse to parse the drag attribute on the element. In our case the HTML might look something like this:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&#x3C;</span>div drag<span class=\"token operator\">=</span><span class=\"token string\">\"onDrag($event)\"</span><span class=\"token operator\">></span><span class=\"token maybe-class-name\">Drag</span> <span class=\"token maybe-class-name\">Me</span><span class=\"token operator\">!</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n</code></pre>\n<p>Since the drag attribute is a function the result of the $parse call will be a function that can be invoked with a scope and optional locals. In our case we are invoking it with the scope of the directive and we are then supplying a custom local which is the event arguments from the event invocation.</p>\n<p>Finally, we probably want to wrap the callback in a <code>scope.$apply</code>. While I won’t get into this too much it will essentially run the code within an Angular digest cycle which allows Angular to do it’s thing (model watches, etc.)</p>\n<p>So our event handler would look like this</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">$scope<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">onDrag</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something here!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>And you’re done!</p>"}},"__N_SSG":true}