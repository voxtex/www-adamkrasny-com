{"pageProps":{"post":{"title":"Simplify async code with generators and promises","date":"2015-05-13T00:00:00.000Z","slug":"simplify-async-code-with-generators-and-promises","content":"<h1>Simplify async code with generators and promises</h1>\n<p>Asynchronous code is a necessary part of life when developing in JavaScript. Why not make it easy on yourself?</p>\n<p>Start with promises. They reduce the need for callback functions and practically eliminate nested callbacks. If you aren’t already using them, you should be. My favorite library for promises is <a href=\"https://github.com/petkaantonov/bluebird\">Bluebird</a></p>\n<p>Then we have generators. They are a new feature introduced in ES6. You can <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">read more about them here</a></p>\n<p>Even when using promises, async code can become unwieldy. Take a look at the following code.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getCompany</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">companyId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">company</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>company<span class=\"token punctuation\">.</span><span class=\"token property-access\">ceoId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Assume id is already set and that all functions return promises. The code will return the user object for the CEO of the original user’s company. Take a look at that same function using generators and <a href=\"https://github.com/tj/co\">co</a>, a helper library.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">co</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> company <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">getCompany</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">companyId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>company<span class=\"token punctuation\">.</span><span class=\"token property-access\">ceoId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Not bad. Generators used with promises gives us code that is nearly identical to async/await. Much easier to follow and read.</p>\n<p>If you’re using Bluebird, <a href=\"https://github.com/petkaantonov/bluebird/blob/master/API.md#promisecoroutinegeneratorfunction-generatorfunction%E2%80%94function\">coroutines provide the same functionality.</a></p>"}},"__N_SSG":true}